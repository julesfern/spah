/**
 * class Spah
 * 
 * For cleanliness, Spah keeps all of its functions, classes and behaviour within the top level <code>Spah</code> object.
 *
 * The Spah client is client-side companion to the Spah rubygem. Together, the two parts are used to build dynamic single-page
 * web applications that:
 *
 * * Don't break document semantics. With Spah, every resource may be curled, scraped and indexed just as with a static site.
 * * Cold boot into full-fledged javascript applications from any of your application's URLs.
 * * Provide graceful continuation of interface state between pages when an action absolutely must be performed synchronously.
 *
 * The central concept in Spah is the **state**. Spah manages the state of your javascript application as a hash which may contain
 * more hashes, booleans, strings and arrays. You, as the developer of your application, define the overall structure of the state.
 *
 * On each request to the server, Spah will attach the state in JSON form to the request. The server modifies the state and returns a
 * new JSON object containing the updates. The Spah client merges the updates into the state and dispatches events to which you may subscribe.
 *
 * Initialising Spah is simple:
 *
 *      $(document).ready(function() { 
 *          Spah.init(); 
 *      });
 *
 * Spah also does away with duplicated server-side and client-side templates. Previously, developers working within practical time constraints
 * have had to choose between (a) creating applications with limited dynamic behaviour and primarily using server-side templates, and (b) creating
 * applications with limitless dynamic behaviour but severely compromised server-side rendering capability. There are mitigating techniques in the form
 * of Mustache templates and other such things, but still a large amount of view logic would ordinarily have to be duplicated in order to provide
 * both static and dynamic versions of your application.
 *
 * Spah's approach is to improve on the dynamic behaviour. Instead of having the server render the same base HTML document for each request and relying
 * on the browser's javascript engine to boot, load data and otherwise make the document usable, Spah allows the server to provision a single HTML document
 * which is then processed into a usable form **before being sent down the wire**. The important parts of boot are handled by the server, making your
 * resources accessible in no-js environments and to search indexers, and the more advanced interactivity is correctly delegated to client-side javascript.
 *
 * This is achieved by embedding template logic within the markup using HTML5 data attributes, thus making the same template logic available to both client
 * and server. When the state is updated by a response from the server, elements with embedded display logic are re-evaluated automatically and the display 
 * updated accordingly.
 *
 * You may also bind more advanced behaviours to changes in the state using 
 *
 * TODO: State queries
 * TODO: Template refactoring
 * TODO: Forcing forms and links to be synchronous 
 * TODO: State only receives deltas on async requests, full state deep-merged on synchronous requests
 *
 * For more information on Spah, see the main [Readme on Github](https://github.com/danski/spah#readme).
 **/
Spah = function() {};

jQuery.extend(Spah, {
  
  /**
   * Spah.logMessages -> Array
   * A stored array of all messages generated by Spah's logging system.
   **/
  "logMessages": [],
  /**
   * Spah.verbose -> Boolean
   * Set to <true>true</true> if you wish Spah to produce debug output in the browser's console.
   **/
  "verbose": false,
  
  /**
   * Spah.boot(options) -> Null
   * desc
   * description
   **/
  "boot": function(options) {
    
  },
  
  /**
   * Spah.log(message) -> String message
   * Logs debug output to Spah's internal logger. If Spah.verbose is set to true, the message will appear in the browser's console.
   **/
  "log": function(message) {
    this.logMessages.push(message);
    if(this.verbose && window.console) {
      console.log(message);
    }
    return message;
  }
});

// Compiler exports
window["Spah"] = Spah;