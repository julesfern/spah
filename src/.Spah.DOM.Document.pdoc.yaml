---
id: "Spah.DOM.Document"
parent_id: "Spah.DOM"
type: class
line_number: 9
description: |
  Wraps behaviour for any HTML document - either the current loaded document on the client-side, or a Blueprint
  document on the server side. Provides behaviour for running document modifiers when the SpahQL assertion
  associated with an element flips between true and false. Also stores the results of each assertion on each
  run-through so that modifiers may be triggered or left alone, as appropriate.

file: /Users/danski/Sites/spah/src/Spah.DOM.Document.js

---
id: "Spah.DOM.Document.defaultModifiers"
parent_id: "Spah.DOM.Document"
type: class property
line_number: 16
description: |
  The list of modifiers to be registered by default on new Document instances where a list of modifiers is not specified in the constructor.

signatures:
 -
  signature: "Spah.DOM.Document.defaultModifiers"
  return_value: "Array"
file: /Users/danski/Sites/spah/src/Spah.DOM.Document.js

---
id: "new Spah.DOM.Document"
parent_id: "Spah.DOM.Document"
type: constructor
line_number: 43
description: |
  Create a new Document instance ready for manipulation.

signatures:
 -
  signature: "new Spah.DOM.Document(jQ, jQDocument, docType, modifiers)"
arguments:
 -
  name: jQ
  types: [Object]
  description: >
    The jQuery context for this document.

 -
  name: contextWindow
  types: [DOMWindow]
  description: >
    The window containing the jQuery context.

 -
  name: docType
  types: [String]
  description: >
    The docType for rendering purposes. Defaults to the HTML5 doctype "<!DOCTYPE html>"

 -
  name: modifiers
  types: [Array]
  description: >
    An optional array of modifiers to be registered. If not supplied, the default modifiers are registered. See #addModifier to learn about document modifiers. You may always append Spah.DOM.Document.defaultModifiers later, if you wish.

file: /Users/danski/Sites/spah/src/Spah.DOM.Document.js

---
id: "Spah.DOM.Document#addModifiers"
parent_id: "Spah.DOM.Document"
type: instance method
line_number: 87
description: |
  - modifierOrArrayOfModifiers (Object, Array<Object>): The modifier object to be registered. Expected to implement the modifier interface.
  - modifier1 (Object): If modifierOrArrayOfModifiers is not an array, then all arguments passed to this method will be added as modifiers.
  
  The interface requires your module to contain the methods:
  
  - **actionName(element, $, window)** Returns the action name for this module. This is the attribute you want your modifier to respond to - for instance, the element ID modifier is interested in attributes like "data-id-foo-if", and therefore the action name is "id". Receives a jQuery containing the element in question as the only argument.
  - **up(element, flags, state, $, window)** Runs the modification forwards. Used when the associated assertion flips from false to true for _if_ assertions and when the associated assertion flips from true to false for _unless_ assertions. The method will receive a jQuery containing the element, the state object and any flags. Flags are derived from the attribute - if we use the attribute <code>data-class-foo-bar-if</code> the actionName will be "class" and the flags will be "foo-bar". The up and down methods are expected to interpret the flags as appropriate.
  - **down(element, flags, state, $, window)** Runs the modification backwards. Called when the associated assertion flips from true to false for _if_ assertions and when the associated assertion flips from false to true for _unless_ assertions. Receives the same arguments as <code>up</code>
  
  In each case the arguments are as follows:
  - "element" is a jQuery containing the element in question
  - "flags" are any arguments given by the attribute name (see below)
  - "state" is the Spah state (a Spah.SpahQL.QueryResult object)
  - "$" is the main jQuery object itself
  - "window" is the context DOMWindow for the document runner. Call window.document for the document itself.
  
  Regarding flags, let's take a look at the ClassName modifier when it processes
  the attributes <code>data-class-foo-bar-if="/foo/bar"</code> and <code>data-class-baz-unless="/notbaz"</code>
  
  The ClassName modifier returns an actionName of "class" for all elements. When Spah's document runner
  encounters this attribute, the ClassName modifier is matched and passed "foo-bar" as the flags for the
  first attribute and "baz" for the second attribute.
  
  It is up to you how your modifiers process flags when they are asked to run up or down.
  
  Modifiers may also add new capabilities to the document. If your modifier includes the "added" method,
  Spah will call this function when the modifier is added to the document. The function receives the
  document instance as an argument. You may use this to extend the document's capabilities - for example
  Spah's built-in Populate modifier adds the addTemplate and removeTemplate methods to the document instance,
  allowing you to register mustache templates with the document.

signatures:
 -
  signature: "Spah.DOM.Document#addModifiers(modifierOrArrayOfModifiers, modifer1, modifierN)"
  return_value: "void"
file: /Users/danski/Sites/spah/src/Spah.DOM.Document.js

---
id: "Spah.DOM.Document#removeModifiers"
parent_id: "Spah.DOM.Document"
type: instance method
line_number: 119
description: |
  - modifierOrArrayOfModifiers (Object, Array<Object>): The modifier object to be deregistered.
  - modifier1 (Object): If modifierOrArrayOfModifiers is not an array, then all arguments passed to this method will be added as modifiers.
  
  Deregisters one or more modifiers from this document instance.
  
  If your modifier implements the "removed" method, this will be called with this document instance as the only
  argument. This allows you to clean up any customisations made by the "added" method, if your modifier provided it.

signatures:
 -
  signature: "Spah.DOM.Document#removeModifiers(modifierOrArrayOfModifiers, modifer1, modifierN)"
  return_value: "void"
file: /Users/danski/Sites/spah/src/Spah.DOM.Document.js

---
id: "Spah.DOM.Document#run"
parent_id: "Spah.DOM.Document"
type: instance method
line_number: 150
description: |
  Runs all conditional logic in the document and modifies the document accordingly. Runs synchronously
  in the browser and asynchronously in the Node.js environment.

signatures:
 -
  signature: "Spah.DOM.Document#run(stateQueryResult, done)"
  return_value: "void"
arguments:
 -
  name: stateQueryResult
  types: [Spah.SpahQL.QueryResult]
  description: >
    The root-level state object with path "/"

 -
  name: done
  types: [Function]
  description: >
    (Server-side only) A callback function to be executed when the run has completed. The callback will receive the document as an argument.

file: /Users/danski/Sites/spah/src/Spah.DOM.Document.js

---
id: "Spah.DOM.Document#runSync"
parent_id: "Spah.DOM.Document"
type: instance method
line_number: 172
description: |
  Synchronous version of #run.

signatures:
 -
  signature: "Spah.DOM.Document#runSync(stateQueryResult)"
  return_value: "void"
arguments:
 -
  name: stateQueryResult
  types: [Spah.SpahQL.QueryResult]
  description: >
    The root-level state object with path "/"

file: /Users/danski/Sites/spah/src/Spah.DOM.Document.js

---
id: "Spah.DOM.Document#runElementSync"
parent_id: "Spah.DOM.Document"
type: instance method
line_number: 188
description: |
  Runs a DOM element through the modifier chain, running any modifiers that apply to the element.

signatures:
 -
  signature: "Spah.DOM.Document#runElementSync(elem, stateQueryResult)"
  return_value: "void"
arguments:
 -
  name: elem
  types: [DOMElement]
  description: >
    The element to be examined and run through the modifier chain

 -
  name: stateQueryResult
  types: [Spah.SpahQL.QueryResult]
  description: >
    The query result object that will be the scope for this element's assertion queries.

file: /Users/danski/Sites/spah/src/Spah.DOM.Document.js