---
id: "Spah.SpahQL.Token.Set"
parent_id: "Spah.SpahQL.Token"
type: class
superclass_id: "Spah.SpahQL.Token.Base"
line_number: 7
description: |
  A wrappping class for any set literal, containing one or more values.
  May qualify as a range if the range operator is used during parsing.

file: /Users/danski/Sites/spah/src/Spah.SpahQL.Token.Set.js

---
id: "Spah.SpahQL.Token.Set.parseAt"
parent_id: "Spah.SpahQL.Token.Set"
type: class method
line_number: 26
description: |
  Reads the given queryString starting at the given index and attempts to identify and parse
  a set literal token. If found, the token will be returned in a tuple \[resumeIndex, foundToken\].
  Returns null if nothing is found.

signatures:
 -
  signature: "Spah.SpahQL.Token.Set.parseAt(index, queryString)"
  return_value: "Array result or null"
file: /Users/danski/Sites/spah/src/Spah.SpahQL.Token.Set.js

---
id: "Spah.SpahQL.Token.Set#tokens"
parent_id: "Spah.SpahQL.Token.Set"
type: instance property
line_number: 94
description: |
  Contains all tokens included in this set, in the order in which they were encountered.

signatures:
 -
  signature: "Spah.SpahQL.Token.Set#tokens"
  return_value: "Array Token"
file: /Users/danski/Sites/spah/src/Spah.SpahQL.Token.Set.js

---
id: "Spah.SpahQL.Token.Set#isRange"
parent_id: "Spah.SpahQL.Token.Set"
type: instance property
line_number: 101
description: |
  A flag indicating whether or not this token is to be evaluated as a range.

signatures:
 -
  signature: "Spah.SpahQL.Token.Set#isRange"
  return_value: "Boolean"
file: /Users/danski/Sites/spah/src/Spah.SpahQL.Token.Set.js

---
id: "new Spah.SpahQL.Token.Set"
parent_id: "Spah.SpahQL.Token.Set"
type: constructor
line_number: 108
description: |
  Instantiate a new set token with the given list of tokens.

signatures:
 -
  signature: "new Spah.SpahQL.Token.Set(value)"
file: /Users/danski/Sites/spah/src/Spah.SpahQL.Token.Set.js

---
id: "Spah.SpahQL.Token.Set#evaluate"
parent_id: "Spah.SpahQL.Token.Set"
type: instance method
line_number: 122
description: |
  Evaluates a set literal, for use when a set is used in a selection query and must be returned as a set of results.
  If the set is a range, it will be flattened into a set of values.

signatures:
 -
  signature: "Spah.SpahQL.Token.Set#evaluate(rootData[, scopeData][, scopePath])"
  return_value: "Array of QueryResults"
arguments:
 -
  name: rootData
  types: [Object]
  description: >
    A root data context for any selection queries that appear in the literal

 -
  name: scopeData
  types: [Object]
  description: >
    A scoped data context for the scope at which selection queries in the set will be evaluated.

 -
  name: scopePath
  types: [String]
  description: >
    The string path at which the scopeData is located in the overall rootData construct.

file: /Users/danski/Sites/spah/src/Spah.SpahQL.Token.Set.js

---
id: "Spah.SpahQL.Token.Set#evalNumericRange"
parent_id: "Spah.SpahQL.Token.Set"
type: instance method
line_number: 170
description: |
  Works with a ruby-style evaluation. Reverse ranges evaluate as empty. Symmetrical ranges e.g. 10..10 evaluate with
  one result.
  
  Evaluates a numeric range literal, generating an array of QueryResults containing all values in the range.

signatures:
 -
  signature: "Spah.SpahQL.Token.Set#evalNumericRange(start, end)"
  return_value: "Array of QueryResults"
arguments:
 -
  name: start
  types: [Number]
  description: >
    The number at the start of the range (10 is the start value for {10..8})

 -
  name: end
  types: [Number]
  description: >
    The number at the start of the range (8 is the end value for {10..8})

file: /Users/danski/Sites/spah/src/Spah.SpahQL.Token.Set.js

---
id: "Spah.SpahQL.Token.Set#evalStringRange"
parent_id: "Spah.SpahQL.Token.Set"
type: instance method
line_number: 216
description: |
  Evaluates a string range literal, generating an array of QueryResults containing all values in the range.
  String range literals are evaluated as numeric ranges using a radix of 35, and transposing the generated numeric values
  back into strings before returning them.
  
  Evaluates with a ruby-style behaviour, for instance:
  "a".."c" -> a, b, c
  "ab".."ad" -> ab, ac, ad
  "a1".."b2" -> a1, a2...... a8, a9, b1, b2
  "1b".."2b" -> 1b, 1c, 1d...... 1x, 1y, 1z, 2a, 2b
  
  So: Each digit is cycled based on a its type, and at the culmination of each digit's cycle the next highest-order
  digit is iterated. The types of digit are number, lowercase char and uppercase char.
  
  If the digits cannot be cycled to a match, as in the example "1a".."b1" where the digits are of differing types, the
  initial value is iterated to its peak and will terminate at that point. The generated range is equivalent in this case
  to "1a".."9z".
  
  If the values appear to be reversed (e.g. "z".."a", "9a".."3a", "D1".."A1") then in ruby style the range will evaluate
  as empty.
  
  We do this by defining three character code ranges for certain character types - integers(48-57), lower case characters (97-122)
  and uppercase characters (65-90). If any two characters belong to the same range then they are mutually iterable.
  
  There is a special case for single-character ranges where if the initial value sits outside of these ranges, it is iterated
  towards the destination value until it reaches the destination value or until it reaches the end of one of the predefined
  ranges above. For instance, "}".."~" will iterate successfully, but "x".."}" despite being an increasing range in raw
  character code terms will only evaluate to "x","y","z". In the case of a range like ")".."a" (character code 41 to 97) the iterator
  will enter the numeric character range (48-57) and in doing so will terminate at char code 57, character "9".
  
  In ranges with multiple digits, characters outside the three defined ranges are locked and do not iterate.

signatures:
 -
  signature: "Spah.SpahQL.Token.Set#evalStringRange(start, end)"
  return_value: "Array of QueryResults"
arguments:
 -
  name: start
  types: [String]
  description: >
    The character at the start of the range ("a" is the start value for {'a'..'c'})

 -
  name: end
  types: [String]
  description: >
    The character at the end of the range ("c" is the end value for {'a'..'c'})

file: /Users/danski/Sites/spah/src/Spah.SpahQL.Token.Set.js