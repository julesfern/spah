Case 1: Basic cold-boot of client app from a given resource URL
================================================================================

Server app boots with Spah configuration. The configuration defines a tree of view contexts that will be used for updates. An update to one context invalidates that context and all of it's child contexts. The viewstate is designed to be held on the client as a context tree where each tree may have object content, but synced to the server with a smaller payload that elides the content and optionally provides a content summary - for example, an array of ticket ID's rather than the full marshal for each ticket in a list.

    Spah::ViewState.prototypes do |root|
      root.default :page => :home
    end

Request in: /projects/100/tickets/400

Routed to ticket controller with params:
    
    :project=>100, :ticket=>400

Inbound request contains no viewstate, so controller fetches default viewstate:

    {}
    
Controller runs action:

    def show(project_id, ticket_id)
      # @user loaded in auth prefilter
      # @project loaded in ensure_project prefilter

      @ticket = Ticket.find_in_project(@project, @user, ticket_id)
      
      # Update the viewstate for this project based on the project prototype (not overwriting the viewstate for other project contexts)
      update_viewstate(:project, @project.id, 
        :ticket=>@ticket
      )
        
      respond_to do |format|
        format.html {render :show} #cold-boot - this is what we're concerned with
        format.json {render @tickets.to_json} # API call
        format.spa  {render :viewstate } # SPA viewstate merge
      end
    end
    
Render chain goes to layout:

    <html>
      <head>
      </head>
      <body data-viewstate="VIEWSTATE_IN_JSON">
        
        <!-- Deliver template payload -->
      </body>
    </html>
    



Case 2: Cold-boot of client app from resource URL with lazy-loaded components
================================================================================

Case 3: Asynchronous load from booted client app
================================================================================

Case 4: Warm-boot client app from previous view state
================================================================================